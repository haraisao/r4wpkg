import sys,os
from ros4win import *

usage="Usage: %s [install|get_pkg||installed_pkgs|pkg_list|get_hash] args" % os.path.basename(sys.argv[0])
import signal
signal.signal(signal.SIGINT, signal.SIG_DFL)

if __name__ == '__main__':
  try:
    cmd=sys.argv[1]
    if cmd == 'install' :
      install_pkg(sys.argv[2], sys.argv[3])

    elif cmd == 'inst' :
      install_package(sys.argv[2], sys.argv[3], False, True)

    elif cmd=='get_hash':
      res=get_hash_value(sys.argv[2])
      print(os.path.basename(sys.argv[2]), res)

    elif cmd=='installed_pkgs':
      res=get_installed_pkgs(sys.argv[2])
      for x in res:
        print(x)

    elif cmd=='pkg_dep':
      res=get_pkg_dep(sys.argv[2])
      print(res)
          
    elif cmd=='pkg_list':
      res=get_pkg_list(sys.argv[2])
      print(res)
          
    elif cmd=='list':
      dbname=sys.argv[2]+"/opt/_pkgmgr/ros4win.db"
      res=get_installed_pkgs_list(dbname)
      print([x[0] for x in res])

    elif cmd=='remove':
      remove_pkg_file_all(sys.argv[2], sys.argv[3])

    elif cmd=='update_list':
      get_package("list", "__pkg__")

    elif cmd=='download':
      path=""
      name=sys.argv[2]
      if len(sys.argv) > 3:
        path=sys.argv[3]

      get_package(name, path)

    elif cmd=='download_all':
      path="tmp"
      name=sys.argv[2]
      if len(sys.argv) > 3:
        path=sys.argv[3]
      pkgs, info=get_depends(name)
      files=[]
      for x in pkgs:
        try:
          fname=get_package(x, path)
          files.append(fname)
          print(".", end="", flush=True)
        except:
          print("[", x, "]", end="", flush=True)
      print(":".join(files))

    elif cmd=='all_package':
      name=sys.argv[2]
      pkgs, info=get_depends(name)
      pkg=[]
      no_pkg=[]
      keys=list(info.keys())
      for x in pkgs:
        if x in keys:
          pkg.append(x)
        else:
          no_pkg.append(x)
      print()
      print("Package:", ",".join(pkg))
      print()
      print("No package:", ",".join(no_pkg))

    elif cmd=='get_pkg':
      path=""
      names=sys.argv[2].split(":")
      if len(sys.argv) > 3:
        path=sys.argv[3]
  
      for n in names:
        if is_meta_pkg(n):
          res=get_pkg_list(n)
          if res :
            get_pkgs(list(res.keys()), path)
        else:
          get_package(n, path)
      else:
        print(usage)
    else:
      print(usage)
  except:
    print("Error...")

